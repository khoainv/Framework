//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace SSD.Mobile.WP
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[82];
            _typeNameTable[0] = "SSD.Mobile.WP.NativeVisibilityConverter";
            _typeNameTable[1] = "Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter`1<Cirrious.MvvmCross.Plugins.Visibility.MvxVisibilityValueConverter>";
            _typeNameTable[2] = "Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "SSD.Mobile.WP.StringFormatConverter";
            _typeNameTable[5] = "SSD.Mobile.WP.MoneyFormatConverter";
            _typeNameTable[6] = "SSD.Mobile.WP.DateFormatConverter";
            _typeNameTable[7] = "SSD.Mobile.WP.DateTimeFormatConverter";
            _typeNameTable[8] = "SSD.Mobile.WP.VisibilityDateTypeConverter";
            _typeNameTable[9] = "SSD.Mobile.WP.BaseMvxWindowsPage";
            _typeNameTable[10] = "Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage";
            _typeNameTable[11] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[13] = "Cirrious.MvvmCross.WindowsCommon.Views.IMvxWindowsFrame";
            _typeNameTable[14] = "Cirrious.MvvmCross.ViewModels.IMvxViewModel";
            _typeNameTable[15] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[16] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[17] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[18] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[19] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[20] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[21] = "String";
            _typeNameTable[22] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[23] = "System.Windows.Input.ICommand";
            _typeNameTable[24] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[25] = "SSD.Mobile.WP.Views.BanLeCTView";
            _typeNameTable[26] = "SSD.Mobile.Share.BanLeCTViewModel";
            _typeNameTable[27] = "SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.BanLeModel>";
            _typeNameTable[28] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.BanLeModel>";
            _typeNameTable[29] = "SSD.Mobile.Share.BaseViewModel";
            _typeNameTable[30] = "Cirrious.MvvmCross.ViewModels.MvxViewModel";
            _typeNameTable[31] = "Cirrious.MvvmCross.ViewModels.MvxNavigatingObject";
            _typeNameTable[32] = "Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged";
            _typeNameTable[33] = "Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject";
            _typeNameTable[34] = "SSD.Mobile.WP.Views.FirstView";
            _typeNameTable[35] = "SSD.Mobile.WP.Views.LocationStoreView";
            _typeNameTable[36] = "SSD.Mobile.Share.LocationStoreViewModel";
            _typeNameTable[37] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.LocationStoreModel>";
            _typeNameTable[38] = "SSD.Mobile.WP.Views.NhapHangCTView";
            _typeNameTable[39] = "SSD.Mobile.Share.NhapHangCTViewModel";
            _typeNameTable[40] = "SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>";
            _typeNameTable[41] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangModel>";
            _typeNameTable[42] = "SSD.Mobile.WP.Views.GiamSatView";
            _typeNameTable[43] = "SSD.Mobile.Share.GiamSatViewModel";
            _typeNameTable[44] = "SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.BanLeModel>";
            _typeNameTable[45] = "SSD.Mobile.WP.Views.NhapHangCNView";
            _typeNameTable[46] = "SSD.Mobile.Share.NhapHangCNViewModel";
            _typeNameTable[47] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangCNModel>";
            _typeNameTable[48] = "SSD.Mobile.WP.Views.NhapHangPlanView";
            _typeNameTable[49] = "SSD.Mobile.Share.NhapHangPlanViewModel";
            _typeNameTable[50] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangPlanModel>";
            _typeNameTable[51] = "SSD.Mobile.WP.Views.NhapHangListView";
            _typeNameTable[52] = "SSD.Mobile.Share.NhapHangListViewModel";
            _typeNameTable[53] = "SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>";
            _typeNameTable[54] = "SSD.Mobile.WP.Views.MenuView";
            _typeNameTable[55] = "SSD.Mobile.Share.MenuViewModel";
            _typeNameTable[56] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.UserModel>";
            _typeNameTable[57] = "SSD.Mobile.WP.Views.ThanhToanView";
            _typeNameTable[58] = "SSD.Mobile.Share.ThanhToanViewModel";
            _typeNameTable[59] = "SSD.Mobile.WP.Views.ThuKhacView";
            _typeNameTable[60] = "SSD.Mobile.Share.ThuKhacViewModel";
            _typeNameTable[61] = "SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>";
            _typeNameTable[62] = "SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>";
            _typeNameTable[63] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>";
            _typeNameTable[64] = "SSD.Mobile.WP.Views.TamUngView";
            _typeNameTable[65] = "SSD.Mobile.Share.TamUngViewModel";
            _typeNameTable[66] = "SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.TamUngModel>";
            _typeNameTable[67] = "SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.TamUngModel>";
            _typeNameTable[68] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.TamUngModel>";
            _typeNameTable[69] = "SSD.Mobile.WP.Views.ChiPhiView";
            _typeNameTable[70] = "SSD.Mobile.Share.ChiPhiViewModel";
            _typeNameTable[71] = "SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>";
            _typeNameTable[72] = "SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>";
            _typeNameTable[73] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>";
            _typeNameTable[74] = "SSD.Mobile.WP.Views.BanLeListView";
            _typeNameTable[75] = "SSD.Mobile.Share.BanLeListViewModel";
            _typeNameTable[76] = "SSD.Mobile.WP.Views.OverviewView";
            _typeNameTable[77] = "SSD.Mobile.Share.OverviewViewModel";
            _typeNameTable[78] = "SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.OverviewModel>";
            _typeNameTable[79] = "SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.OverviewModel>";
            _typeNameTable[80] = "SSD.Mobile.WP.Views.LoginView";
            _typeNameTable[81] = "SSD.Mobile.Share.LoginViewModel";

            _typeTable = new global::System.Type[82];
            _typeTable[0] = typeof(global::SSD.Mobile.WP.NativeVisibilityConverter);
            _typeTable[1] = typeof(global::Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter<global::Cirrious.MvvmCross.Plugins.Visibility.MvxVisibilityValueConverter>);
            _typeTable[2] = typeof(global::Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::SSD.Mobile.WP.StringFormatConverter);
            _typeTable[5] = typeof(global::SSD.Mobile.WP.MoneyFormatConverter);
            _typeTable[6] = typeof(global::SSD.Mobile.WP.DateFormatConverter);
            _typeTable[7] = typeof(global::SSD.Mobile.WP.DateTimeFormatConverter);
            _typeTable[8] = typeof(global::SSD.Mobile.WP.VisibilityDateTypeConverter);
            _typeTable[9] = typeof(global::SSD.Mobile.WP.BaseMvxWindowsPage);
            _typeTable[10] = typeof(global::Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[13] = typeof(global::Cirrious.MvvmCross.WindowsCommon.Views.IMvxWindowsFrame);
            _typeTable[14] = typeof(global::Cirrious.MvvmCross.ViewModels.IMvxViewModel);
            _typeTable[15] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[16] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[19] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[20] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[21] = typeof(global::System.String);
            _typeTable[22] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[23] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[25] = typeof(global::SSD.Mobile.WP.Views.BanLeCTView);
            _typeTable[26] = typeof(global::SSD.Mobile.Share.BanLeCTViewModel);
            _typeTable[27] = typeof(global::SSD.Mobile.Share.ReportBaseViewModel<global::SSD.Mobile.Share.BanLeModel>);
            _typeTable[28] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.BanLeModel>);
            _typeTable[29] = typeof(global::SSD.Mobile.Share.BaseViewModel);
            _typeTable[30] = typeof(global::Cirrious.MvvmCross.ViewModels.MvxViewModel);
            _typeTable[31] = typeof(global::Cirrious.MvvmCross.ViewModels.MvxNavigatingObject);
            _typeTable[32] = typeof(global::Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged);
            _typeTable[33] = typeof(global::Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject);
            _typeTable[34] = typeof(global::SSD.Mobile.WP.Views.FirstView);
            _typeTable[35] = typeof(global::SSD.Mobile.WP.Views.LocationStoreView);
            _typeTable[36] = typeof(global::SSD.Mobile.Share.LocationStoreViewModel);
            _typeTable[37] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.LocationStoreModel>);
            _typeTable[38] = typeof(global::SSD.Mobile.WP.Views.NhapHangCTView);
            _typeTable[39] = typeof(global::SSD.Mobile.Share.NhapHangCTViewModel);
            _typeTable[40] = typeof(global::SSD.Mobile.Share.ReportBaseViewModel<global::SSD.Mobile.Share.NhapHangModel>);
            _typeTable[41] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.NhapHangModel>);
            _typeTable[42] = typeof(global::SSD.Mobile.WP.Views.GiamSatView);
            _typeTable[43] = typeof(global::SSD.Mobile.Share.GiamSatViewModel);
            _typeTable[44] = typeof(global::SSD.Mobile.Share.ReportListBaseViewModel<global::SSD.Mobile.Share.BanLeModel>);
            _typeTable[45] = typeof(global::SSD.Mobile.WP.Views.NhapHangCNView);
            _typeTable[46] = typeof(global::SSD.Mobile.Share.NhapHangCNViewModel);
            _typeTable[47] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.NhapHangCNModel>);
            _typeTable[48] = typeof(global::SSD.Mobile.WP.Views.NhapHangPlanView);
            _typeTable[49] = typeof(global::SSD.Mobile.Share.NhapHangPlanViewModel);
            _typeTable[50] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.NhapHangPlanModel>);
            _typeTable[51] = typeof(global::SSD.Mobile.WP.Views.NhapHangListView);
            _typeTable[52] = typeof(global::SSD.Mobile.Share.NhapHangListViewModel);
            _typeTable[53] = typeof(global::SSD.Mobile.Share.ReportListBaseViewModel<global::SSD.Mobile.Share.NhapHangModel>);
            _typeTable[54] = typeof(global::SSD.Mobile.WP.Views.MenuView);
            _typeTable[55] = typeof(global::SSD.Mobile.Share.MenuViewModel);
            _typeTable[56] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.UserModel>);
            _typeTable[57] = typeof(global::SSD.Mobile.WP.Views.ThanhToanView);
            _typeTable[58] = typeof(global::SSD.Mobile.Share.ThanhToanViewModel);
            _typeTable[59] = typeof(global::SSD.Mobile.WP.Views.ThuKhacView);
            _typeTable[60] = typeof(global::SSD.Mobile.Share.ThuKhacViewModel);
            _typeTable[61] = typeof(global::SSD.Mobile.Share.ReportListBaseViewModel<global::SSD.Mobile.Share.ThuKhacModel>);
            _typeTable[62] = typeof(global::SSD.Mobile.Share.ReportBaseViewModel<global::SSD.Mobile.Share.ThuKhacModel>);
            _typeTable[63] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.ThuKhacModel>);
            _typeTable[64] = typeof(global::SSD.Mobile.WP.Views.TamUngView);
            _typeTable[65] = typeof(global::SSD.Mobile.Share.TamUngViewModel);
            _typeTable[66] = typeof(global::SSD.Mobile.Share.ReportListBaseViewModel<global::SSD.Mobile.Share.TamUngModel>);
            _typeTable[67] = typeof(global::SSD.Mobile.Share.ReportBaseViewModel<global::SSD.Mobile.Share.TamUngModel>);
            _typeTable[68] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.TamUngModel>);
            _typeTable[69] = typeof(global::SSD.Mobile.WP.Views.ChiPhiView);
            _typeTable[70] = typeof(global::SSD.Mobile.Share.ChiPhiViewModel);
            _typeTable[71] = typeof(global::SSD.Mobile.Share.ReportListBaseViewModel<global::SSD.Mobile.Share.ChiPhiModel>);
            _typeTable[72] = typeof(global::SSD.Mobile.Share.ReportBaseViewModel<global::SSD.Mobile.Share.ChiPhiModel>);
            _typeTable[73] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.ChiPhiModel>);
            _typeTable[74] = typeof(global::SSD.Mobile.WP.Views.BanLeListView);
            _typeTable[75] = typeof(global::SSD.Mobile.Share.BanLeListViewModel);
            _typeTable[76] = typeof(global::SSD.Mobile.WP.Views.OverviewView);
            _typeTable[77] = typeof(global::SSD.Mobile.Share.OverviewViewModel);
            _typeTable[78] = typeof(global::SSD.Mobile.Share.ReportBaseViewModel<global::SSD.Mobile.Share.OverviewModel>);
            _typeTable[79] = typeof(global::SSD.Mobile.Share.BaseViewModel<global::SSD.Mobile.Share.OverviewModel>);
            _typeTable[80] = typeof(global::SSD.Mobile.WP.Views.LoginView);
            _typeTable[81] = typeof(global::SSD.Mobile.Share.LoginViewModel);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_NativeVisibilityConverter() { return new global::SSD.Mobile.WP.NativeVisibilityConverter(); }
        private object Activate_1_MvxNativeValueConverter() { return new global::Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter<global::Cirrious.MvvmCross.Plugins.Visibility.MvxVisibilityValueConverter>(); }
        private object Activate_4_StringFormatConverter() { return new global::SSD.Mobile.WP.StringFormatConverter(); }
        private object Activate_5_MoneyFormatConverter() { return new global::SSD.Mobile.WP.MoneyFormatConverter(); }
        private object Activate_6_DateFormatConverter() { return new global::SSD.Mobile.WP.DateFormatConverter(); }
        private object Activate_7_DateTimeFormatConverter() { return new global::SSD.Mobile.WP.DateTimeFormatConverter(); }
        private object Activate_8_VisibilityDateTypeConverter() { return new global::SSD.Mobile.WP.VisibilityDateTypeConverter(); }
        private object Activate_9_BaseMvxWindowsPage() { return new global::SSD.Mobile.WP.BaseMvxWindowsPage(); }
        private object Activate_16_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_19_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_20_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_22_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_25_BanLeCTView() { return new global::SSD.Mobile.WP.Views.BanLeCTView(); }
        private object Activate_26_BanLeCTViewModel() { return new global::SSD.Mobile.Share.BanLeCTViewModel(); }
        private object Activate_34_FirstView() { return new global::SSD.Mobile.WP.Views.FirstView(); }
        private object Activate_35_LocationStoreView() { return new global::SSD.Mobile.WP.Views.LocationStoreView(); }
        private object Activate_36_LocationStoreViewModel() { return new global::SSD.Mobile.Share.LocationStoreViewModel(); }
        private object Activate_38_NhapHangCTView() { return new global::SSD.Mobile.WP.Views.NhapHangCTView(); }
        private object Activate_39_NhapHangCTViewModel() { return new global::SSD.Mobile.Share.NhapHangCTViewModel(); }
        private object Activate_42_GiamSatView() { return new global::SSD.Mobile.WP.Views.GiamSatView(); }
        private object Activate_43_GiamSatViewModel() { return new global::SSD.Mobile.Share.GiamSatViewModel(); }
        private object Activate_45_NhapHangCNView() { return new global::SSD.Mobile.WP.Views.NhapHangCNView(); }
        private object Activate_46_NhapHangCNViewModel() { return new global::SSD.Mobile.Share.NhapHangCNViewModel(); }
        private object Activate_48_NhapHangPlanView() { return new global::SSD.Mobile.WP.Views.NhapHangPlanView(); }
        private object Activate_49_NhapHangPlanViewModel() { return new global::SSD.Mobile.Share.NhapHangPlanViewModel(); }
        private object Activate_51_NhapHangListView() { return new global::SSD.Mobile.WP.Views.NhapHangListView(); }
        private object Activate_52_NhapHangListViewModel() { return new global::SSD.Mobile.Share.NhapHangListViewModel(); }
        private object Activate_54_MenuView() { return new global::SSD.Mobile.WP.Views.MenuView(); }
        private object Activate_55_MenuViewModel() { return new global::SSD.Mobile.Share.MenuViewModel(); }
        private object Activate_57_ThanhToanView() { return new global::SSD.Mobile.WP.Views.ThanhToanView(); }
        private object Activate_58_ThanhToanViewModel() { return new global::SSD.Mobile.Share.ThanhToanViewModel(); }
        private object Activate_59_ThuKhacView() { return new global::SSD.Mobile.WP.Views.ThuKhacView(); }
        private object Activate_60_ThuKhacViewModel() { return new global::SSD.Mobile.Share.ThuKhacViewModel(); }
        private object Activate_64_TamUngView() { return new global::SSD.Mobile.WP.Views.TamUngView(); }
        private object Activate_65_TamUngViewModel() { return new global::SSD.Mobile.Share.TamUngViewModel(); }
        private object Activate_69_ChiPhiView() { return new global::SSD.Mobile.WP.Views.ChiPhiView(); }
        private object Activate_70_ChiPhiViewModel() { return new global::SSD.Mobile.Share.ChiPhiViewModel(); }
        private object Activate_74_BanLeListView() { return new global::SSD.Mobile.WP.Views.BanLeListView(); }
        private object Activate_75_BanLeListViewModel() { return new global::SSD.Mobile.Share.BanLeListViewModel(); }
        private object Activate_76_OverviewView() { return new global::SSD.Mobile.WP.Views.OverviewView(); }
        private object Activate_77_OverviewViewModel() { return new global::SSD.Mobile.Share.OverviewViewModel(); }
        private object Activate_80_LoginView() { return new global::SSD.Mobile.WP.Views.LoginView(); }
        private void VectorAdd_16_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  SSD.Mobile.WP.NativeVisibilityConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter`1<Cirrious.MvvmCross.Plugins.Visibility.MvxVisibilityValueConverter>"));
                userType.Activator = Activate_0_NativeVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter`1<Cirrious.MvvmCross.Plugins.Visibility.MvxVisibilityValueConverter>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter"));
                userType.Activator = Activate_1_MvxNativeValueConverter;
                xamlType = userType;
                break;

            case 2:   //  Cirrious.CrossCore.WindowsCommon.Converters.MvxNativeValueConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  SSD.Mobile.WP.StringFormatConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_StringFormatConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  SSD.Mobile.WP.MoneyFormatConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_MoneyFormatConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  SSD.Mobile.WP.DateFormatConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_DateFormatConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  SSD.Mobile.WP.DateTimeFormatConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_DateTimeFormatConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  SSD.Mobile.WP.VisibilityDateTypeConverter
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_VisibilityDateTypeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  SSD.Mobile.WP.BaseMvxWindowsPage
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage"));
                userType.Activator = Activate_9_BaseMvxWindowsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.AddMemberName("WrappedFrame");
                userType.AddMemberName("ViewModel");
                xamlType = userType;
                break;

            case 11:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Cirrious.MvvmCross.WindowsCommon.Views.IMvxWindowsFrame
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Cirrious.MvvmCross.ViewModels.IMvxViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 16:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_16_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_19_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 20:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_20_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  String
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_22_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 23:   //  System.Windows.Input.ICommand
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  SSD.Mobile.WP.Views.BanLeCTView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_25_BanLeCTView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  SSD.Mobile.Share.BanLeCTViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.BanLeModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.BanLeModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.BanLeModel>"));
                xamlType = userType;
                break;

            case 28:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.BanLeModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 29:   //  SSD.Mobile.Share.BaseViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.ViewModels.MvxViewModel"));
                xamlType = userType;
                break;

            case 30:   //  Cirrious.MvvmCross.ViewModels.MvxViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.ViewModels.MvxNavigatingObject"));
                xamlType = userType;
                break;

            case 31:   //  Cirrious.MvvmCross.ViewModels.MvxNavigatingObject
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged"));
                xamlType = userType;
                break;

            case 32:   //  Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject"));
                xamlType = userType;
                break;

            case 33:   //  Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 34:   //  SSD.Mobile.WP.Views.FirstView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage"));
                userType.Activator = Activate_34_FirstView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  SSD.Mobile.WP.Views.LocationStoreView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_35_LocationStoreView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  SSD.Mobile.Share.LocationStoreViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.LocationStoreModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.LocationStoreModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 38:   //  SSD.Mobile.WP.Views.NhapHangCTView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_38_NhapHangCTView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  SSD.Mobile.Share.NhapHangCTViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangModel>"));
                xamlType = userType;
                break;

            case 41:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 42:   //  SSD.Mobile.WP.Views.GiamSatView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_42_GiamSatView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  SSD.Mobile.Share.GiamSatViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.BanLeModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.BanLeModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.BanLeModel>"));
                xamlType = userType;
                break;

            case 45:   //  SSD.Mobile.WP.Views.NhapHangCNView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_45_NhapHangCNView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  SSD.Mobile.Share.NhapHangCNViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangCNModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangCNModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 48:   //  SSD.Mobile.WP.Views.NhapHangPlanView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_48_NhapHangPlanView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  SSD.Mobile.Share.NhapHangPlanViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangPlanModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.NhapHangPlanModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 51:   //  SSD.Mobile.WP.Views.NhapHangListView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_51_NhapHangListView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  SSD.Mobile.Share.NhapHangListViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>"));
                xamlType = userType;
                break;

            case 54:   //  SSD.Mobile.WP.Views.MenuView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_54_MenuView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  SSD.Mobile.Share.MenuViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.UserModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.UserModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 57:   //  SSD.Mobile.WP.Views.ThanhToanView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_57_ThanhToanView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  SSD.Mobile.Share.ThanhToanViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.NhapHangModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  SSD.Mobile.WP.Views.ThuKhacView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_59_ThuKhacView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  SSD.Mobile.Share.ThuKhacViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>"));
                xamlType = userType;
                break;

            case 62:   //  SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>"));
                xamlType = userType;
                break;

            case 63:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.ThuKhacModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 64:   //  SSD.Mobile.WP.Views.TamUngView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_64_TamUngView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  SSD.Mobile.Share.TamUngViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.TamUngModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.TamUngModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.TamUngModel>"));
                xamlType = userType;
                break;

            case 67:   //  SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.TamUngModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.TamUngModel>"));
                xamlType = userType;
                break;

            case 68:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.TamUngModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 69:   //  SSD.Mobile.WP.Views.ChiPhiView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_69_ChiPhiView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  SSD.Mobile.Share.ChiPhiViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 71:   //  SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>"));
                xamlType = userType;
                break;

            case 72:   //  SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>"));
                xamlType = userType;
                break;

            case 73:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.ChiPhiModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 74:   //  SSD.Mobile.WP.Views.BanLeListView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_74_BanLeListView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  SSD.Mobile.Share.BanLeListViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportListBaseViewModel`1<SSD.Mobile.Share.BanLeModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 76:   //  SSD.Mobile.WP.Views.OverviewView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_76_OverviewView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 77:   //  SSD.Mobile.Share.OverviewViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.OverviewModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 78:   //  SSD.Mobile.Share.ReportBaseViewModel`1<SSD.Mobile.Share.OverviewModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.OverviewModel>"));
                xamlType = userType;
                break;

            case 79:   //  SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.OverviewModel>
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel"));
                xamlType = userType;
                break;

            case 80:   //  SSD.Mobile.WP.Views.LoginView
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.WP.BaseMvxWindowsPage"));
                userType.Activator = Activate_80_LoginView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 81:   //  SSD.Mobile.Share.LoginViewModel
                userType = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("SSD.Mobile.Share.BaseViewModel`1<SSD.Mobile.Share.UserModel>"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MvxWindowsPage_WrappedFrame(object instance)
        {
            var that = (global::Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage)instance;
            return that.WrappedFrame;
        }
        private object get_1_MvxWindowsPage_ViewModel(object instance)
        {
            var that = (global::Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage)instance;
            return that.ViewModel;
        }
        private void set_1_MvxWindowsPage_ViewModel(object instance, object Value)
        {
            var that = (global::Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage)instance;
            that.ViewModel = (global::Cirrious.MvvmCross.ViewModels.IMvxViewModel)Value;
        }
        private object get_2_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_2_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_3_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_4_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_4_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_5_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_5_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_6_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_7_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_7_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_8_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_8_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_9_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_9_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_10_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_10_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_11_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_11_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_12_BanLeCTView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.BanLeCTView)instance;
            return that.ViewModel;
        }
        private void set_12_BanLeCTView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.BanLeCTView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.BanLeCTViewModel)Value;
        }
        private object get_13_LocationStoreView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.LocationStoreView)instance;
            return that.ViewModel;
        }
        private void set_13_LocationStoreView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.LocationStoreView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.LocationStoreViewModel)Value;
        }
        private object get_14_NhapHangCTView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangCTView)instance;
            return that.ViewModel;
        }
        private void set_14_NhapHangCTView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangCTView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.NhapHangCTViewModel)Value;
        }
        private object get_15_GiamSatView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.GiamSatView)instance;
            return that.ViewModel;
        }
        private void set_15_GiamSatView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.GiamSatView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.GiamSatViewModel)Value;
        }
        private object get_16_NhapHangCNView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangCNView)instance;
            return that.ViewModel;
        }
        private void set_16_NhapHangCNView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangCNView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.NhapHangCNViewModel)Value;
        }
        private object get_17_NhapHangPlanView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangPlanView)instance;
            return that.ViewModel;
        }
        private void set_17_NhapHangPlanView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangPlanView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.NhapHangPlanViewModel)Value;
        }
        private object get_18_NhapHangListView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangListView)instance;
            return that.ViewModel;
        }
        private void set_18_NhapHangListView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.NhapHangListView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.NhapHangListViewModel)Value;
        }
        private object get_19_MenuView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.MenuView)instance;
            return that.ViewModel;
        }
        private void set_19_MenuView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.MenuView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.MenuViewModel)Value;
        }
        private object get_20_ThanhToanView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.ThanhToanView)instance;
            return that.ViewModel;
        }
        private void set_20_ThanhToanView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.ThanhToanView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.ThanhToanViewModel)Value;
        }
        private object get_21_ThuKhacView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.ThuKhacView)instance;
            return that.ViewModel;
        }
        private void set_21_ThuKhacView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.ThuKhacView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.ThuKhacViewModel)Value;
        }
        private object get_22_TamUngView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.TamUngView)instance;
            return that.ViewModel;
        }
        private void set_22_TamUngView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.TamUngView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.TamUngViewModel)Value;
        }
        private object get_23_ChiPhiView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.ChiPhiView)instance;
            return that.ViewModel;
        }
        private void set_23_ChiPhiView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.ChiPhiView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.ChiPhiViewModel)Value;
        }
        private object get_24_BanLeListView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.BanLeListView)instance;
            return that.ViewModel;
        }
        private void set_24_BanLeListView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.BanLeListView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.BanLeListViewModel)Value;
        }
        private object get_25_OverviewView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.OverviewView)instance;
            return that.ViewModel;
        }
        private void set_25_OverviewView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.OverviewView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.OverviewViewModel)Value;
        }
        private object get_26_LoginView_ViewModel(object instance)
        {
            var that = (global::SSD.Mobile.WP.Views.LoginView)instance;
            return that.ViewModel;
        }
        private void set_26_LoginView_ViewModel(object instance, object Value)
        {
            var that = (global::SSD.Mobile.WP.Views.LoginView)instance;
            that.ViewModel = (global::SSD.Mobile.Share.LoginViewModel)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember xamlMember = null;
            global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage.WrappedFrame":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "WrappedFrame", "Cirrious.MvvmCross.WindowsCommon.Views.IMvxWindowsFrame");
                xamlMember.Getter = get_0_MvxWindowsPage_WrappedFrame;
                xamlMember.SetIsReadOnly();
                break;
            case "Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Cirrious.MvvmCross.WindowsCommon.Views.MvxWindowsPage");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "Cirrious.MvvmCross.ViewModels.IMvxViewModel");
                xamlMember.Getter = get_1_MvxWindowsPage_ViewModel;
                xamlMember.Setter = set_1_MvxWindowsPage_ViewModel;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_2_Interaction_Behaviors;
                xamlMember.Setter = set_2_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_4_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_5_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_6_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_InvokeCommandAction_Command;
                xamlMember.Setter = set_7_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_8_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_9_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_10_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_11_InvokeCommandAction_InputConverterLanguage;
                break;
            case "SSD.Mobile.WP.Views.BanLeCTView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.BanLeCTView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.BanLeCTViewModel");
                xamlMember.Getter = get_12_BanLeCTView_ViewModel;
                xamlMember.Setter = set_12_BanLeCTView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.LocationStoreView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.LocationStoreView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.LocationStoreViewModel");
                xamlMember.Getter = get_13_LocationStoreView_ViewModel;
                xamlMember.Setter = set_13_LocationStoreView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.NhapHangCTView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.NhapHangCTView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.NhapHangCTViewModel");
                xamlMember.Getter = get_14_NhapHangCTView_ViewModel;
                xamlMember.Setter = set_14_NhapHangCTView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.GiamSatView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.GiamSatView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.GiamSatViewModel");
                xamlMember.Getter = get_15_GiamSatView_ViewModel;
                xamlMember.Setter = set_15_GiamSatView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.NhapHangCNView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.NhapHangCNView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.NhapHangCNViewModel");
                xamlMember.Getter = get_16_NhapHangCNView_ViewModel;
                xamlMember.Setter = set_16_NhapHangCNView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.NhapHangPlanView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.NhapHangPlanView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.NhapHangPlanViewModel");
                xamlMember.Getter = get_17_NhapHangPlanView_ViewModel;
                xamlMember.Setter = set_17_NhapHangPlanView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.NhapHangListView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.NhapHangListView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.NhapHangListViewModel");
                xamlMember.Getter = get_18_NhapHangListView_ViewModel;
                xamlMember.Setter = set_18_NhapHangListView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.MenuView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.MenuView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.MenuViewModel");
                xamlMember.Getter = get_19_MenuView_ViewModel;
                xamlMember.Setter = set_19_MenuView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.ThanhToanView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.ThanhToanView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.ThanhToanViewModel");
                xamlMember.Getter = get_20_ThanhToanView_ViewModel;
                xamlMember.Setter = set_20_ThanhToanView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.ThuKhacView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.ThuKhacView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.ThuKhacViewModel");
                xamlMember.Getter = get_21_ThuKhacView_ViewModel;
                xamlMember.Setter = set_21_ThuKhacView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.TamUngView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.TamUngView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.TamUngViewModel");
                xamlMember.Getter = get_22_TamUngView_ViewModel;
                xamlMember.Setter = set_22_TamUngView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.ChiPhiView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.ChiPhiView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.ChiPhiViewModel");
                xamlMember.Getter = get_23_ChiPhiView_ViewModel;
                xamlMember.Setter = set_23_ChiPhiView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.BanLeListView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.BanLeListView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.BanLeListViewModel");
                xamlMember.Getter = get_24_BanLeListView_ViewModel;
                xamlMember.Setter = set_24_BanLeListView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.OverviewView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.OverviewView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.OverviewViewModel");
                xamlMember.Getter = get_25_OverviewView_ViewModel;
                xamlMember.Setter = set_25_OverviewView_ViewModel;
                break;
            case "SSD.Mobile.WP.Views.LoginView.ViewModel":
                userType = (global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SSD.Mobile.WP.Views.LoginView");
                xamlMember = new global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlMember(this, "ViewModel", "SSD.Mobile.Share.LoginViewModel");
                xamlMember.Getter = get_26_LoginView_ViewModel;
                xamlMember.Setter = set_26_LoginView_ViewModel;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlSystemBaseType
    {
        global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SSD.Mobile.WP.SSD_Mobile_WP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


