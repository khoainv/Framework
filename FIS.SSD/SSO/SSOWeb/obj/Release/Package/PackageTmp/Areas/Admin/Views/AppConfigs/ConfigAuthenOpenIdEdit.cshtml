@model UG.SSO.Config.AppConfig

@{
    ViewBag.Title = "Edit Authen Config OpenId Connect";
    UG.SSO.Config.ExtAuthenticationOpenIdConnect authen = new UG.SSO.Config.ExtAuthenticationOpenIdConnect();
    if (Model != null&&!string.IsNullOrWhiteSpace(Model.ConfigData))
    {
        authen = UG.SSO.Config.ExtAuthenticationOpenIdConnect.GetObject(Model.ConfigData);
    }
}

<h4>@ViewBag.Title</h4>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        <div class="form-group">
            @Html.LabelFor(model => model.ConfigKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfigKey, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfigKey, "", new { @class = "text-danger" })
                @Html.ValidationMessage("CustomConfigKey", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Caption", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("Caption", authen.Caption, new { @class = "form-control", style = "max-width:600px" })
                @Html.ValidationMessage("Caption", "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Authority", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("Authority", authen.Authority, new { @class = "form-control", style = "max-width:600px" })
                @Html.ValidationMessage("Authority", "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("RedirectUri", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("RedirectUri", authen.RedirectUri, new { @class = "form-control", style = "max-width:600px" })
                @Html.ValidationMessage("RedirectUri", "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("PostLogoutRedirectUri", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("PostLogoutRedirectUri", authen.PostLogoutRedirectUri, new { @class = "form-control", style = "max-width:600px" })
                @Html.ValidationMessage("PostLogoutRedirectUri", "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("ClientId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("ClientId", authen.ClientId, new { @class = "form-control", style = "max-width:600px" })
                @Html.ValidationMessage("ClientId", "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.Label("ClientSecret", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("ClientSecret", authen.ClientSecret, new { @class = "form-control", style = "max-width:600px" })
                @Html.ValidationMessage("ClientSecret", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsEncryption, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsEncryption)
                    @Html.ValidationMessageFor(model => model.IsEncryption, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "ConfigExt", new { typeName = typeof(UG.SSO.Config.ExtAuthenticationOpenIdConnect).FullName }, null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
