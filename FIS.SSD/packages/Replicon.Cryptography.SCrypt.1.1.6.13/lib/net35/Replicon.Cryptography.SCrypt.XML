<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Replicon.Cryptography.SCrypt</name>
    </assembly>
    <members>
        <member name="T:Replicon.Cryptography.SCrypt.IKeyDerivationFunction">
            <summary>
            Interface wrapping an scrypt key-derivation function implementation.
            </summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IKeyDerivationFunction.DeriveKey(System.Byte[],System.Byte[],System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Key-derivation function.</summary>
            <param name="password">The password bytes to generate the key based upon.</param>
            <param name="salt">Random salt bytes to make the derived key unique.</param>
            <param name="N">CPU/memory cost parameter.  Must be a value 2^N.  2^14 (16384) causes a calculation time
            of approximately 50-70ms on 2010 era hardware; each successive value (eg. 2^15, 2^16, ...) should
            double the amount of CPU time and memory required.</param>
            <param name="r">scrypt 'r' tuning parameter</param>
            <param name="p">scrypt 'p' tuning parameter (parallelization parameter); a large value of p can increase
            computational cost of scrypt without increasing the memory usage.</param>
            <param name="derivedKeyLengthBytes">The number of bytes of key to derive.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.MixedModeAssemblyKeyDerivationFunction.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            There is a similar method in the .NET 4 base classes, but we need to implement our own to support .NET
            3.5 still.
            </summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.MixedModeAssemblyKeyDerivationFunction.EscapeExecutionContext``1(System.Func{``0})">
            <summary>
            CRT initialization when first accessing the mixed-mode assembly will attempt to initialize a CRT appdomain,
            which attempts to copy the current thread's execution context.  However, because the new appdomain doesn't
            have a configuration matching the current appdomain, it often can't find the assemblies required to
            deserialize the principal, or other objects stored in the execution context.  To work around this, we
            attempt to "escape" our execution context by spawning a new thread.  I welcome ideas for how to make this
            more efficient.
            </summary>
        </member>
        <member name="T:Replicon.Cryptography.SCrypt.Factory">
            <summary>
            Factory for creating pre-defined implementations of IPasswordHash and IKeyDerivationFunction.
            </summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.Factory.CreatePasswordHash">
            <summary>
            Create an IPasswordHash implementation, using the best available key-derivation function implementation.
            </summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.Factory.CreatePasswordHash(Replicon.Cryptography.SCrypt.IKeyDerivationFunction)">
            <summary>
            Create an IPasswordHash implementation, using the provided key-derivation function implementation.
            </summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.Factory.CreateKeyDerivationFunction">
            <summary>
            Create an IKeyDerivationFunction representing the best available key-derivation function implementation.
            </summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.Factory.CreateNativeKeyDerivationFunction">
            <summary>
            Create an IKeyDerivationFunction implemented by a mixed-mode assembly.  This is a high-performance
            implementation using SSE2, but requires support for C++/CLI mixed-mode assemblies (ie. doesn't work on
            Mono), and requires that the current environment be supported (.NET 3.5 or 4.0, x86 or x64).
            </summary>
            <remarks>If the mixed-mode assembly cannot be loaded, this method will... FIXME: what?</remarks>
        </member>
        <member name="T:Replicon.Cryptography.SCrypt.SCrypt">
            <summary>Static wrapper for Factory.CreatePasswordHash().</summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.GenerateSalt">
            <summary>Generate a salt for use with HashPassword, selecting reasonable default values for scrypt
            parameters that are appropriate for an interactive login verification workflow.</summary>
            <remarks>Uses the default values in DefaultSaltLengthBytes, Default_N, Default_r, Default_r, and
            DefaultHashLengthBytes.</remarks>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.GenerateSalt(System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Generate a random salt for use with HashPassword.  In addition to the random salt, the salt value
            also contains the tuning parameters to use with the scrypt algorithm, as well as the size of the password
            hash to generate.</summary>
            <param name="saltLengthBytes">The number of bytes of random salt to generate.  The goal for the salt is
            to be unique.  16 bytes gives a 2^128 possible salt options, and roughly an N in 2^64 chance of a salt
            collision for N salts, which seems reasonable.  A larger salt requires more storage space, but doesn't
            affect the scrypt performance significantly.</param>
            <param name="N">CPU/memory cost parameter.  Must be a value 2^N.  2^14 (16384) causes a calculation time
            of approximately 50-70ms on 2010 era hardware; each successive value (eg. 2^15, 2^16, ...) should
            double the amount of CPU time and memory required.</param>
            <param name="r">scrypt 'r' tuning parameter</param>
            <param name="p">scrypt 'p' tuning parameter (parallelization parameter); a large value of p can increase
            computational cost of scrypt without increasing the memory usage.</param>
            <param name="hashLengthBytes">The number of bytes to store the password hash in.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.HashPassword(System.String)">
            <summary>Generate a password hash using a newly generated salt, with default salt parameters.</summary>
            <param name="password">A password to hash.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.TryParseSalt(System.String,System.Byte[]@,System.UInt64@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Attempt to parse the salt component of a salt or password and return the tuning parameters
            embedded in the salt.</summary>
            <param name="salt">Salt or hashed password to parse.</param>
            <param name="saltBytes">The randomly generated salt data.  The length will match saltLengthBytes from
            GenerateSalt.</param>
            <param name="N">Matching value for GenerateSalt's N parameter.</param>
            <param name="r">Matching value for GenerateSalt's r parameter.</param>
            <param name="p">Matching value for GenerateSalt's p parameter.</param>
            <param name="hashLengthBytes">The number of bytes to store the password hash in.</param>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.ParseSalt(System.String,System.Byte[]@,System.UInt64@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Parse the salt component of a salt or password and return the tuning parameters embedded in the
            salt.</summary>
            <exception cref="T:Replicon.Cryptography.SCrypt.SaltParseException">Throws SaltParseException if an error
            occurs while parsing the salt.</exception>
            <param name="salt">Salt or hashed password to parse.</param>
            <param name="saltBytes">The randomly generated salt data.  The length will match saltLengthBytes from
            GenerateSalt.</param>
            <param name="N">Matching value for GenerateSalt's N parameter.</param>
            <param name="r">Matching value for GenerateSalt's r parameter.</param>
            <param name="p">Matching value for GenerateSalt's p parameter.</param>
            <param name="hashLengthBytes">The number of bytes to store the password hash in.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.HashPassword(System.String,System.String)">
            <summary>Generate a password hash using a specific password salt.</summary>
            <param name="password">A password to hash.</param>
            <param name="salt">Salt to hash the password with.  This is often a password hash from a previous
            HashPassword call, which contains the salt of the original password call; in that case, the returned
            hash will be identical to the salt parameter if the password is the same password as the original.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.Verify(System.String,System.String)">
            <summary>Verify that a given password matches a given hash.</summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.SCrypt.DeriveKey(System.Byte[],System.Byte[],System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>The 'raw' scrypt key-derivation function.</summary>
            <param name="password">The password bytes to generate the key based upon.</param>
            <param name="salt">Random salt bytes to make the derived key unique.</param>
            <param name="N">CPU/memory cost parameter.  Must be a value 2^N.  2^14 (16384) causes a calculation time
            of approximately 50-70ms on 2010 era hardware; each successive value (eg. 2^15, 2^16, ...) should
            double the amount of CPU time and memory required.</param>
            <param name="r">scrypt 'r' tuning parameter</param>
            <param name="p">scrypt 'p' tuning parameter (parallelization parameter); a large value of p can increase
            computational cost of scrypt without increasing the memory usage.</param>
            <param name="derivedKeyLengthBytes">The number of bytes of key to derive.</param>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.SCrypt.DefaultSaltLengthBytes">
            <summary>Default value for saltLengthBytes used by parameterless GenerateSalt, currently 16 bytes.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.SCrypt.Default_N">
            <summary>Default value for N used by parameterless GenerateSalt, currently 2^14.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.SCrypt.Default_r">
            <summary>Default value for r used by parameterless GenerateSalt, currently 8.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.SCrypt.Default_p">
            <summary>Default value for p used by parameterless GenerateSalt, currently 1.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.SCrypt.DefaultHashLengthBytes">
            <summary>Default value for hashLengthBytes used by parameterless GenerateSalt, currently 32 bytes.</summary>
        </member>
        <member name="T:Replicon.Cryptography.SCrypt.IPasswordHash">
            <summary>Wrapper for the scrypt key-derivation function that provides helper functions for a common use-case
            of scrypt as a password hashing algorithm.</summary>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.GenerateSalt">
            <summary>Generate a salt for use with HashPassword, selecting reasonable default values for scrypt
            parameters that are appropriate for an interactive login verification workflow.</summary>
            <remarks>Uses the default values in DefaultSaltLengthBytes, Default_N, Default_r, Default_r, and
            DefaultHashLengthBytes.</remarks>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.GenerateSalt(System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Generate a random salt for use with HashPassword.  In addition to the random salt, the salt value
            also contains the tuning parameters to use with the scrypt algorithm, as well as the size of the password
            hash to generate.</summary>
            <param name="saltLengthBytes">The number of bytes of random salt to generate.  The goal for the salt is
            to be unique.  16 bytes gives a 2^128 possible salt options, and roughly an N in 2^64 chance of a salt
            collision for N salts, which seems reasonable.  A larger salt requires more storage space, but doesn't
            affect the scrypt performance significantly.</param>
            <param name="N">CPU/memory cost parameter.  Must be a value 2^N.  2^14 (16384) causes a calculation time
            of approximately 50-70ms on 2010 era hardware; each successive value (eg. 2^15, 2^16, ...) should
            double the amount of CPU time and memory required.</param>
            <param name="r">scrypt 'r' tuning parameter</param>
            <param name="p">scrypt 'p' tuning parameter (parallelization parameter); a large value of p can increase
            computational cost of scrypt without increasing the memory usage.</param>
            <param name="hashLengthBytes">The number of bytes to store the password hash in.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.HashPassword(System.String)">
            <summary>Generate a password hash using a newly generated salt, with default salt parameters.</summary>
            <param name="password">A password to hash.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.TryParseSalt(System.String,System.Byte[]@,System.UInt64@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Attempt to parse the salt component of a salt or password and return the tuning parameters
            embedded in the salt.</summary>
            <param name="salt">Salt or hashed password to parse.</param>
            <param name="saltBytes">The randomly generated salt data.  The length will match saltLengthBytes from
            GenerateSalt.</param>
            <param name="N">Matching value for GenerateSalt's N parameter.</param>
            <param name="r">Matching value for GenerateSalt's r parameter.</param>
            <param name="p">Matching value for GenerateSalt's p parameter.</param>
            <param name="hashLengthBytes">The number of bytes to store the password hash in.</param>
            <returns>True if the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.ParseSalt(System.String,System.Byte[]@,System.UInt64@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Parse the salt component of a salt or password and return the tuning parameters embedded in the
            salt.</summary>
            <exception cref="T:Replicon.Cryptography.SCrypt.SaltParseException">Throws SaltParseException if an error
            occurs while parsing the salt.</exception>
            <param name="salt">Salt or hashed password to parse.</param>
            <param name="saltBytes">The randomly generated salt data.  The length will match saltLengthBytes from
            GenerateSalt.</param>
            <param name="N">Matching value for GenerateSalt's N parameter.</param>
            <param name="r">Matching value for GenerateSalt's r parameter.</param>
            <param name="p">Matching value for GenerateSalt's p parameter.</param>
            <param name="hashLengthBytes">The number of bytes to store the password hash in.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.HashPassword(System.String,System.String)">
            <summary>Generate a password hash using a specific password salt.</summary>
            <param name="password">A password to hash.</param>
            <param name="salt">Salt to hash the password with.  This is often a password hash from a previous
            HashPassword call, which contains the salt of the original password call; in that case, the returned
            hash will be identical to the salt parameter if the password is the same password as the original.</param>
        </member>
        <member name="M:Replicon.Cryptography.SCrypt.IPasswordHash.Verify(System.String,System.String)">
            <summary>Verify that a given password matches a given hash.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.IPasswordHash.DefaultSaltLengthBytes">
            <summary>Default value for saltLengthBytes used by parameterless GenerateSalt, currently 16 bytes.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.IPasswordHash.Default_N">
            <summary>Default value for N used by parameterless GenerateSalt, currently 2^14.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.IPasswordHash.Default_r">
            <summary>Default value for r used by parameterless GenerateSalt, currently 8.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.IPasswordHash.Default_p">
            <summary>Default value for p used by parameterless GenerateSalt, currently 1.</summary>
        </member>
        <member name="P:Replicon.Cryptography.SCrypt.IPasswordHash.DefaultHashLengthBytes">
            <summary>Default value for hashLengthBytes used by parameterless GenerateSalt, currently 32 bytes.</summary>
        </member>
        <member name="T:Replicon.Cryptography.SCrypt.SaltParseException">
            <summary>
            Exception thrown when a SCrypt salt string is unparsable.
            </summary>
        </member>
    </members>
</doc>
